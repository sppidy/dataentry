import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import mysql.connector as mysql
import datetime
import decimal
passwd='spidy'
#from login import passwd

# This program is the sql version of the ./program.py file

# Path: program2.py
# This is the main program which uses sql database to store the data.
def main():
    global db
    global cursor
    db=mysql.connect(host="localhost", user="root", password=passwd)
    cursor=db.cursor()
    window=tk.Tk()
    window.title("Mines Management System")
    window.iconbitmap("mines.ico")
    window.geometry("1186x852")
    window.configure(background="#CCCCFF")
    style= ttk.Style()
    style.theme_use("alt")
    style.theme_settings("alt",{"TLabelFrame":{"configure":{"background":"#CCCCFF"}}})
    style.configure("TFrame", background= "#CCCCFF", foreground= "black", font=("Calibiri", 10))
    style.configure("TCombobox", fieldbackground= "light blue", background= "light blue", foreground= "black", bordercolor= "black", arrowcolor= "black", selectbackground= "white", selectforeground= "black", font=("Calibiri"))
    style.configure("TEntry", fieldbackground= "light blue", background= "light blue", foreground= "black", bordercolor= "black", selectbackground= "white", selectforeground= "black", font=("Calibiri"))
    style.configure("TLabel", background= "#CCCCFF", foreground= "black", font=( "Calibiri",11, 'bold', 'italic'))
    style.configure("TLabelFrame",bordercolor= "black", background= "#CCCCFF", foreground= "black", font=("Calibiri",10))
    style.configure("TLabelFrame.Label", background= "#CCCCFF", foreground= "black", font=("Calibiri",10))
    style.configure("data_info", background= "#CCCCFF", foreground= "black", font=("Calibiri",10))
    style.configure("data1_info", background= "#CCCCFF", foreground= "black", font=("Calibiri",10))
    frame = ttk.Frame(window)
    frame.pack()
    canvas=tk.Canvas(frame,height=809,width=1600, background="#CCCCFF")
    scroll_bar=ttk.Scrollbar(frame, orient="vertical", command=canvas.yview)
    scroll_bar.pack(side="right", fill="y")
    scroll_bar1=ttk.Scrollbar(frame, orient="horizontal", command=canvas.xview)
    scroll_bar1.pack(side="bottom", fill="x")
    canvas.pack(ipadx=40,ipady=10, fill="both", expand=1)
    canvas.configure(yscrollcommand=scroll_bar.set, xscrollcommand=scroll_bar1.set)
    canvas.bind('<Configure>', lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
    second_frame=ttk.Frame(canvas)
    canvas.create_window((0,0), window=second_frame, anchor="nw")
    # --- Window and scroll bar Property Completed ---
    # --- Translation ---
    english=[]
    tamil=[]
    # --- Translation Completed ---
    #Menu Bar
    def about():
        messagebox.showinfo("About", "This program is developed by Spidy"
                            "\nVersion: 1.0.0"
                            "\nDate: 10/05/2023")
    def help():
        messagebox.showinfo("Help", "Contact: spidy@ultroid.tech")
    def exit_program():
        window.destroy()
    def create_dbtables():
        global sql
        global cursor
        cursor.execute("CREATE DATABASE if not exists mpdre")
        cursor.execute("USE mpdre")
        cursor.execute("CREATE TABLE if not exists dr (date date PRIMARY KEY NOT NULL,bunk_name varchar(10) NOT NULL,diesel_purchased int NOT NULL,sanybreakerhrs int NOT NULL,sanybuckethrs int NOT NULL,volvo240buckethrs int NOT NULL,volvo210buckethrs int NOT NULL,cardieselltrs int NOT NULL,_3359_diesel_ltrs int NOT NULL,_770_diesel_ltrs int NOT NULL,_compressor1dieselltrs int NOT NULL,_compressor2dieselltrs int NOT NULL,_volvo_240_diesel_ltrs int NOT NULL,_volvo_210_diesel_ltrs int NOT NULL,_sany_140_diesel_ltrs int NOT NULL,dieselpriceonday int NOT NULL,_5569_loads int NOT NULL,_9970_loads int NOT NULL,_222_loads int NOT NULL,_3359_loads int NOT NULL,_5506_loads int NOT NULL,_5508_loads int NOT NULL,_950_loads int NOT NULL)")
        cursor.execute("CREATE TABLE if not exists explosives (date date NOT NULL,blasting_done_on varchar(20) NOT NULL,_3m_total int NOT NULL,_3m_used int NOT NULL,_4m_total int NOT NULL,_4m_used int NOT NULL,_5m_total int NOT NULL,_5m_used int NOT NULL,_6m_total int NOT NULL,_6m_used int NOT NULL,_7m_total int NOT NULL,_7m_used int NOT NULL,_8m_total int not null,_8m_used int not null,_9m_total int not null,_9m_used int not null,_10m_total int not null,_10m_used int not null,_12m_total int not null,_12m_used int not null,_15m_total int not null,_15m_used int not null,_slurry_total int NOT NULL,_slurry_used int NOT NULL,_slurry_big_total int NOT NULL,_slurry_big_used int NOT NULL,_ed_total int NOT NULL,_ed_used int NOT NULL,_ddet_total int NOT NULL,_ddet_used int NOT NULL,_df_5_gms_total int NOT NULL,_df_5_gms_used int NOT NULL,_df_10_gms_total int NOT NULL,_df_10_gms_used int NOT NULL,noofholes_2_5 int NOT NULL,noofholes_5 int NOT NULL,noofholes_6 int NOT NULL,noofholes_8 int NOT NULL,wagon_drill_4_5 int NOT NULL,amount_paid_to_balan int NOT NULL)")
        messagebox.showinfo("Success", "Tables created successfully")
    def help_sql():
        messagebox.showinfo("Help", "Install MySQL server and create a database named mpdre and click on 'Create Tables' in the SQL menu")
    menu_bar = tk.Menu(window)
    file_menu = tk.Menu(menu_bar, tearoff=0)
    file_menu.add_command(label="About", command=about)
    file_menu.add_command(label="Help", command=help)
    file_menu.add_command(label="Exit", command=exit_program)
    sql_menu = tk.Menu(menu_bar, tearoff=0)
    sql_menu.add_command(label="Create Tables", command=create_dbtables)
    sql_menu.add_command(label="DB Help", command=help_sql)
    menu_bar.add_cascade(label="File", menu=file_menu)
    menu_bar.add_cascade(label="DB", menu=sql_menu)
    window.config(menu=menu_bar)
    #Menu Bar Completed
    #Contents
    # --- Data Entry 1 ---
    data_info =tk.LabelFrame(second_frame, text="Diesel and Runtime Entry",background="#CCCCFF", foreground="black", font=("Calibiri", 10))
    data_info.grid(row= 0, column=0, padx=20, pady=10)
    date_label = ttk.Label(data_info, text="Date")
    date_label.grid(row=0, column=0)
    date_entry = ttk.Entry(data_info)
    date_entry.grid(row=1, column=0)
    bunk_name_label = ttk.Label(data_info, text="Bulk Name")
    bunk_name_label.grid(row=0, column=1)
    bunk_name = ttk.Combobox(data_info, values=["Thirupathi","Saravana","Nayara","Others"])
    bunk_name.grid(row=1, column=1)
    diesel_purchased_label = ttk.Label(data_info, text="Diesel Purchased")
    diesel_purchased_label.grid(row=0, column=2)
    diesel_purchased=ttk.Combobox(data_info, values=[100,200,400,600,800,1000,1200,1400])
    diesel_purchased.grid(row=1, column=2)
    sanybreakerhours_label = ttk.Label(data_info, text="Sany Breaker Hours")
    sanybreakerhours_label.grid(row=0, column=3)
    sanybreakerhours_entry = ttk.Entry(data_info)
    sanybreakerhours_entry.grid(row=1, column=3)
    sanybuckerhours_label = ttk.Label(data_info, text="Sany Bucket Hours")
    sanybuckerhours_label.grid(row=0, column=4)
    sanybuckerhours_entry = ttk.Entry(data_info)
    sanybuckerhours_entry.grid(row=1, column=4)
    volvo240buckethours_label = ttk.Label(data_info, text="Volvo 240 Bucket Hours")
    volvo240buckethours_label.grid(row=0, column=5)
    volvo240buckethours_entry = ttk.Entry(data_info)
    volvo240buckethours_entry.grid(row=1, column=5)
    volvo210buckethours_label = ttk.Label(data_info, text="Volvo 210 Breaker Hours")
    volvo210buckethours_label.grid(row=2, column=0)
    volvo210buckethours_entry = ttk.Entry(data_info)
    volvo210buckethours_entry.grid(row=3, column=0)
    car_diesel_ltrs_label = ttk.Label(data_info, text="Car Diesel Ltrs")
    car_diesel_ltrs_label.grid(row=2, column=1)
    car_diesel_ltrs_entry = ttk.Entry(data_info)
    car_diesel_ltrs_entry.grid(row=3, column=1)
    _3359diesel_label = ttk.Label(data_info, text="3359 Diesel Ltrs")
    _3359diesel_label.grid(row=2, column=2)
    _3359diesel_entry = ttk.Entry(data_info)
    _3359diesel_entry.grid(row=3, column=2)
    _770_diesel_label = ttk.Label(data_info, text="770 Diesel Ltrs")
    _770_diesel_label.grid(row=2, column=3)
    _770_diesel_entry = ttk.Entry(data_info)
    _770_diesel_entry.grid(row=3, column=3)
    _compressor1diesel_label = ttk.Label(data_info, text="Compressor1 Diesel Ltrs")
    _compressor1diesel_label.grid(row=2, column=4)
    _compressor1diesel_entry = ttk.Entry(data_info)
    _compressor1diesel_entry.grid(row=3, column=4)
    _compressor2diesel_label = ttk.Label(data_info, text="Compressor2 Diesel Ltrs")
    _compressor2diesel_label.grid(row=2, column=5)
    _compressor2diesel_entry = ttk.Entry(data_info)
    _compressor2diesel_entry.grid(row=3, column=5)
    _volvo240diesel_label = ttk.Label(data_info, text="Volvo 240 Diesel Ltrs")
    _volvo240diesel_label.grid(row=4, column=0)
    _volvo240diesel_entry = ttk.Entry(data_info)
    _volvo240diesel_entry.grid(row=5, column=0)
    _volvo210diesel_label = ttk.Label(data_info, text="Volvo 210 Diesel Ltrs")
    _volvo210diesel_label.grid(row=4, column=1)
    _volvo210diesel_entry = ttk.Entry(data_info)
    _volvo210diesel_entry.grid(row=5, column=1)
    _sany140diesel_label = ttk.Label(data_info, text="Sany 140 Diesel Ltrs")
    _sany140diesel_label.grid(row=4, column=2)
    _sany140diesel_entry = ttk.Entry(data_info)
    _sany140diesel_entry.grid(row=5, column=2)
    _diesel_price_on_day_label = ttk.Label(data_info, text="Diesel Price On Day")
    _diesel_price_on_day_label.grid(row=4, column=3)
    _diesel_price_on_day_entry = ttk.Entry(data_info)
    _diesel_price_on_day_entry.grid(row=5, column=3)
    _5569_loads_label = ttk.Label(data_info, text="5569 Loads")
    _5569_loads_label.grid(row=4, column=4)
    _5569_loads_entry = ttk.Entry(data_info)
    _5569_loads_entry.grid(row=5, column=4)
    _9970_loads_label = ttk.Label(data_info, text="9970 Loads")
    _9970_loads_label.grid(row=4, column=5)
    _9970_loads_entry = ttk.Entry(data_info)
    _9970_loads_entry.grid(row=5, column=5)
    _222_loads_label = ttk.Label(data_info, text="222 Loads")
    _222_loads_label.grid(row=6, column=0)
    _222_loads_entry = ttk.Entry(data_info)
    _222_loads_entry.grid(row=7, column=0)
    _3359_loads_label = ttk.Label(data_info, text="3359 Loads")
    _3359_loads_label.grid(row=6, column=1)
    _3359_loads_entry = ttk.Entry(data_info)
    _3359_loads_entry.grid(row=7, column=1)
    _5506_loads_label = ttk.Label(data_info, text="5506 Loads")
    _5506_loads_label.grid(row=6, column=2)
    _5506_loads_entry = ttk.Entry(data_info)
    _5506_loads_entry.grid(row=7, column=2)
    _5508_loads_label = ttk.Label(data_info, text="5508 Loads")
    _5508_loads_label.grid(row=6, column=3)
    _5508_loads_entry = ttk.Entry(data_info)
    _5508_loads_entry.grid(row=7, column=3)
    _950_loads_label = ttk.Label(data_info, text="950 Loads")
    _950_loads_label.grid(row=6, column=4)
    _950_loads_entry = ttk.Entry(data_info)
    _950_loads_entry.grid(row=7, column=4)
    for widget in data_info.winfo_children():
        widget.grid_configure(padx=7, pady=10)
    # Datentry 1 Functions
    def save_data():
        global db
        global cursor
        date=date_entry.get()
        bunkname=bunk_name.get()
        dieselpurchased=int(diesel_purchased.get())
        sanybreakerhours=int(sanybreakerhours_entry.get())
        sanybuckerhours=int(sanybuckerhours_entry.get())
        volvo240breakerhours=int(volvo240buckethours_entry.get())
        volvo210breakerhours=int(volvo210buckethours_entry.get())
        car_diesel_ltrs=int(car_diesel_ltrs_entry.get())
        _3359_diesel_ltrs=int(_3359diesel_entry.get())
        _770_diesel_ltrs=int(_770_diesel_entry.get())
        _compressor1diesel_=int(_compressor1diesel_entry.get())
        _compressor2diesel_=int(_compressor2diesel_entry.get())
        _volvo_240_diesel_ = int(_volvo240diesel_entry.get())
        _volvo_210_diesel_ = int(_volvo210diesel_entry.get())
        _sany_140_diesel_ = int(_sany140diesel_entry.get())
        _diesel_price_on_day_ = int(_diesel_price_on_day_entry.get())
        _5569_loads_ = int(_5569_loads_entry.get())
        _9970_loads_ = int(_9970_loads_entry.get())
        _222_loads_ = int(_222_loads_entry.get())
        _3359_loads_ = int(_3359_loads_entry.get())
        _5506_loads_ = int(_5506_loads_entry.get())
        _5508_loads_ = int(_5508_loads_entry.get())
        _950_loads_ = int(_950_loads_entry.get())
        cursor.execute("USE mpdre")
        cursor.execute(f"insert into dr values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",(date,bunkname,dieselpurchased,sanybreakerhours,sanybuckerhours,volvo240breakerhours,volvo210breakerhours,car_diesel_ltrs,_3359_diesel_ltrs,_770_diesel_ltrs,_compressor1diesel_,_compressor2diesel_,_volvo_240_diesel_,_volvo_210_diesel_,_sany_140_diesel_,_diesel_price_on_day_,_5569_loads_,_9970_loads_,_222_loads_,_3359_loads_,_5506_loads_,_5508_loads_,_950_loads_))
        db.commit()
        messagebox.showinfo("Success", "Data saved successfully")
        clear_data()
    def clear_data():
        date_entry.delete(0, 'end')
        bunk_name.delete(0, 'end')
        diesel_purchased.delete(0, 'end')
        sanybreakerhours_entry.delete(0, 'end')
        sanybuckerhours_entry.delete(0, 'end')
        volvo240buckethours_entry.delete(0, 'end')
        volvo210buckethours_entry.delete(0, 'end')
        car_diesel_ltrs_entry.delete(0, 'end')
        _3359diesel_entry.delete(0, 'end')
        _770_diesel_entry.delete(0, 'end')
        _compressor1diesel_entry.delete(0, 'end')
        _compressor2diesel_entry.delete(0, 'end')
        _volvo240diesel_entry.delete(0, 'end')
        _volvo210diesel_entry.delete(0, 'end')
        _sany140diesel_entry.delete(0, 'end')
        _diesel_price_on_day_entry.delete(0, 'end')
        _5569_loads_entry.delete(0, 'end')
        _9970_loads_entry.delete(0, 'end')
        _222_loads_entry.delete(0, 'end')
        _3359_loads_entry.delete(0, 'end')
        _5506_loads_entry.delete(0, 'end')
        _5508_loads_entry.delete(0, 'end')
        _950_loads_entry.delete(0, 'end')
    def edit_data():
        global db
        global cursor
        global date_entry1
        win1=tk.Tk()
        win1.title("Edit Data")
        win1.iconbitmap("mines.ico")
        win1.geometry("325x200")
        win1.configure(background="#CCCCFF")
        frame1=ttk.Frame(win1,padding=20)
        frame1.pack()
        dataframe1=ttk.LabelFrame(frame1, text="Edit Data")
        dataframe1.grid(row=0, column=0, padx=10, pady=10)
        date_label1=ttk.Label(dataframe1, text="Date")
        date_label1.grid(row=0, column=0)
        date_entry1=ttk.Entry(dataframe1)
        date_entry1.grid(row=0, column=1)
        def search_data():
            global date_entry1
            global cursor
            date_entry_s = date_entry1.get()
            cursor.execute("USE mpdre")
            cursor.execute(f"SELECT * FROM dr WHERE date = '{date_entry_s}'")
            data = cursor.fetchone()
            if data is not None:
                date_entry.insert(0, data[0].strftime("%d/%m/%Y"))
                bunk_name.insert(0, data[1])
                diesel_purchased.insert(0, data[2])
                sanybreakerhours_entry.insert(0, data[3])
                sanybuckerhours_entry.insert(0, data[4])
                volvo240buckethours_entry.insert(0, data[5])
                volvo210buckethours_entry.insert(0, data[6])
                car_diesel_ltrs_entry.insert(0, data[7])
                _3359diesel_entry.insert(0, data[8])
                _770_diesel_entry.insert(0, data[9])
                _compressor1diesel_entry.insert(0, data[10])
                _compressor2diesel_entry.insert(0, data[11])
                _volvo240diesel_entry.insert(0, data[12])
                _volvo210diesel_entry.insert(0, data[13])
                _sany140diesel_entry.insert(0, data[14])
                _diesel_price_on_day_entry.insert(0, data[15])
                _5569_loads_entry.insert(0, data[16])
                _9970_loads_entry.insert(0, data[17])
                _222_loads_entry.insert(0, data[18])
                _3359_loads_entry.insert(0, data[19])
                _5506_loads_entry.insert(0, data[20])
                _5508_loads_entry.insert(0, data[21])
                _950_loads_entry.insert(0, data[22])
                messagebox.showinfo("Success", "Data found. You can edit all values except date.")
            else:
                messagebox.showinfo("No Data", "No data found.")
            win1.destroy()
        editbutton=ttk.Button(frame1, text="Edit", command=search_data)
        editbutton.grid(row=1, column=0)
        win1.mainloop()
        
    def update_data():
        global db
        global cursor
        global date_entry1
        date=date_entry.get()
        bunkname=bunk_name.get()
        dieselpurchased=int(diesel_purchased.get())
        sanybreakerhours=int(sanybreakerhours_entry.get())
        sanybuckerhours=int(sanybuckerhours_entry.get())
        volvo240breakerhours=int(volvo240buckethours_entry.get())
        volvo210breakerhours=int(volvo210buckethours_entry.get())
        car_diesel_ltrs=int(car_diesel_ltrs_entry.get())
        _3359_diesel_ltrs=int(_3359diesel_entry.get())
        _770_diesel_ltrs=int(_770_diesel_entry.get())
        _compressor1diesel_=int(_compressor1diesel_entry.get())
        _compressor2diesel_=int(_compressor2diesel_entry.get())
        _volvo_240_diesel_ = int(_volvo240diesel_entry.get())
        _volvo_210_diesel_ = int(_volvo210diesel_entry.get())
        _sany_140_diesel_ = int(_sany140diesel_entry.get())
        _diesel_price_on_day_ = int(_diesel_price_on_day_entry.get())
        _5569_loads_ = int(_5569_loads_entry.get())
        _9970_loads_ = int(_9970_loads_entry.get())
        _222_loads_ = int(_222_loads_entry.get())
        _3359_loads_ = int(_3359_loads_entry.get())
        _5506_loads_ = int(_5506_loads_entry.get())
        _5508_loads_ = int(_5508_loads_entry.get())
        _950_loads_ = int(_950_loads_entry.get())
        cursor.execute("USE mpdre")
        cursor.execute(f"update dr set bunk_name='{bunkname}',diesel_purchased={dieselpurchased},sanybreakerhrs={sanybreakerhours},sanybuckethrs={sanybuckerhours},volvo240buckethrs={volvo240breakerhours},volvo210buckethrs={volvo210breakerhours},cardieselltrs={car_diesel_ltrs},_3359_diesel_ltrs={_3359_diesel_ltrs},_770_diesel_ltrs={_770_diesel_ltrs},_compressor1dieselltrs={_compressor1diesel_},_compressor2dieselltrs={_compressor2diesel_},_volvo_240_diesel_ltrs={_volvo_240_diesel_},_volvo_210_diesel_ltrs={_volvo_210_diesel_},_sany_140_diesel_ltrs={_sany_140_diesel_},dieselpriceonday={_diesel_price_on_day_},_5569_loads={_5569_loads_},_9970_loads={_9970_loads_},_222_loads={_222_loads_},_3359_loads={_3359_loads_},_5506_loads={_5506_loads_},_5508_loads={_5508_loads_},_950_loads={_950_loads_} where date={date_entry1.get()}")
        db.commit()
        clear_data()
        messagebox.showinfo("Success", "Data updated successfully")

    def delete_data():
        global db
        global cursor
        win2=tk.Tk()
        win2.title("Delete Data")
        win2.iconbitmap("mines.ico")
        win2.geometry("325x200")
        win2.configure(background="#CCCCFF")
        frame2=ttk.Frame(win2,padding=20)
        frame2.pack()
        dataframe2=ttk.LabelFrame(frame2, text="Delete Data")
        dataframe2.grid(row=0, column=0, padx=10, pady=10)
        date_label2=ttk.Label(dataframe2, text="Date")
        date_label2.grid(row=0, column=0)
        date_entry2=ttk.Entry(dataframe2)
        date_entry2.grid(row=0, column=1)
        def del_data():
            date_entry_s=date_entry2.get()
            cursor.execute("USE mpdre")
            cursor.execute(f"delete from dr where date={date_entry_s}")
            db.commit()
            messagebox.showinfo("Success", "Data deleted successfully")
            win2.destroy()
        delbutton=ttk.Button(frame2, text="Delete", command=del_data)
        delbutton.grid(row=1, column=0)
        win2.mainloop()
        
    # --- Data Entry 1 Functions Completed ---
    # --- Data Entry 1 Buttons ---
    button_frame = ttk.Frame(second_frame)
    button_frame.grid(row= 1, column=0, padx=40, pady=10)
        
    # Button Save
    button_save = tk.Button(button_frame, text="ㅤㅤㅤSaveㅤㅤㅤ", command= save_data)
    button_save.configure(background="green")
    button_save.grid(row=0, column=0, sticky="news")
    # Button Clear
    button_clear = tk.Button(button_frame, text="ㅤㅤㅤClearㅤㅤㅤ", command= clear_data)
    button_clear.configure(background="yellow")
    button_clear.grid(row=0, column=1, sticky="news")
    # Button Edit
    button_edit = tk.Button(button_frame, text="ㅤㅤㅤEditㅤㅤㅤ", command= edit_data)
    button_edit.configure(background="cyan")
    button_edit.grid(row=0, column=2, sticky="news")
    #Button Update
    button_update=tk.Button(button_frame,text="ㅤㅤㅤUpdateㅤㅤㅤ",command=update_data)
    button_update.configure(background="orange")
    button_update.grid(row=0,column=3,sticky="news")
    #Button Delete
    button_delete = tk.Button(button_frame, text="ㅤㅤㅤDeleteㅤㅤㅤ", command= delete_data)
    button_delete.configure(background="red")
    button_delete.grid(row=0, column=4, sticky="news")
    # --- Data Entry 1 Buttons Completed ---

    #--- Data Entry 1 Completed ---
    # --- Data Entry 2 ---
    data1_info =tk.LabelFrame(second_frame, text="Mines Entry",background="#CCCCFF",font=("Calibiri", 10))
    data1_info.grid(row= 2, column=0, padx=40, pady=10)
    date1_label=ttk.Label(data1_info, text="Date",background="#CCCCFF")
    date1_label.grid(row=0, column=0)
    date1_entry=ttk.Entry(data1_info)
    date1_entry.grid(row=1, column=0)
    blasting_done_on_label_=ttk.Label(data1_info, text="Blasting Done On")
    blasting_done_on_label_.grid(row=0, column=1)
    blasting_done_on_entry_=ttk.Combobox(data1_info, values=["Soft Rock", "Hard Rock"])
    blasting_done_on_entry_.grid(row=1, column=1)
    _3m_excel_label_=ttk.Label(data1_info, text="3m Excel Reciept")
    _3m_excel_label_.grid(row=0, column=2)
    _3m_excel_entry_=ttk.Entry(data1_info)
    _3m_excel_entry_.grid(row=1, column=2)
    _3m_excel_used_label_=ttk.Label(data1_info, text="3m Excel Used")
    _3m_excel_used_label_.grid(row=0, column=3)
    _3m_excel_used_entry_=ttk.Entry(data1_info)
    _3m_excel_used_entry_.grid(row=1, column=3)
    _4m_reciepts_label_=ttk.Label(data1_info, text="4m Excel Reciepts")
    _4m_reciepts_label_.grid(row=0, column=4)
    _4m_reciepts_entry_=ttk.Entry(data1_info)
    _4m_reciepts_entry_.grid(row=1, column=4)
    _4m_excel_used_label_=ttk.Label(data1_info, text="4m Excel Used")
    _4m_excel_used_label_.grid(row=0, column=5)
    _4m_excel_used_entry_=ttk.Entry(data1_info)
    _4m_excel_used_entry_.grid(row=1, column=5)
    _5m_excel_reciepts_label_=ttk.Label(data1_info, text="5m Excel Reciepts")
    _5m_excel_reciepts_label_.grid(row=2, column=0)
    _5m_excel_reciepts_entry_=ttk.Entry(data1_info)
    _5m_excel_reciepts_entry_.grid(row=3, column=0)
    _5m_excel_used_label_=ttk.Label(data1_info, text="5m Excel Used")
    _5m_excel_used_label_.grid(row=2, column=1)
    _5m_excel_used_entry_=ttk.Entry(data1_info)
    _5m_excel_used_entry_.grid(row=3, column=1)
    _6m_excel_reciepts_label_=ttk.Label(data1_info, text="6m Excel Reciepts")
    _6m_excel_reciepts_label_.grid(row=2, column=2)
    _6m_excel_reciepts_entry_=ttk.Entry(data1_info)
    _6m_excel_reciepts_entry_.grid(row=3, column=2)
    _6m_excel_used_label_=ttk.Label(data1_info, text="6m Excel Used")
    _6m_excel_used_label_.grid(row=2, column=3)
    _6m_excel_used_entry_=ttk.Entry(data1_info)
    _6m_excel_used_entry_.grid(row=3, column=3)
    _7m_excel_reciepts_label_=ttk.Label(data1_info, text="7m Excel Reciepts")
    _7m_excel_reciepts_label_.grid(row=2, column=4)
    _7m_excel_reciepts_entry_=ttk.Entry(data1_info)
    _7m_excel_reciepts_entry_.grid(row=3, column=4)
    _7m_excel_used_label_=ttk.Label(data1_info, text="7m Excel Used")
    _7m_excel_used_label_.grid(row=2, column=5)
    _7m_excel_used_entry_=ttk.Entry(data1_info)
    _7m_excel_used_entry_.grid(row=3, column=5)
    _8m_excel_reciepts_label_=ttk.Label(data1_info, text="8m Excel Reciepts")
    _8m_excel_reciepts_label_.grid(row=4, column=0)
    _8m_excel_reciepts_entry_=ttk.Entry(data1_info)
    _8m_excel_reciepts_entry_.grid(row=5, column=0)
    _8m_excel_used_label_=ttk.Label(data1_info, text="8m Excel Used")
    _8m_excel_used_label_.grid(row=4, column=1)
    _8m_excel_used_entry_=ttk.Entry(data1_info)
    _8m_excel_used_entry_.grid(row=5, column=1)
    _9m_excel_reciepts_label_=ttk.Label(data1_info, text="9m Excel Reciepts")
    _9m_excel_reciepts_label_.grid(row=4, column=2)
    _9m_excel_reciepts_entry_=ttk.Entry(data1_info)
    _9m_excel_reciepts_entry_.grid(row=5, column=2)
    _9m_excel_used_label_=ttk.Label(data1_info, text="9m Excel Used")
    _9m_excel_used_label_.grid(row=4, column=3)
    _9m_excel_used_entry_=ttk.Entry(data1_info)
    _9m_excel_used_entry_.grid(row=5, column=3)
    _10m_excel_reciepts_label_=ttk.Label(data1_info, text="10m Excel Reciepts")
    _10m_excel_reciepts_label_.grid(row=4, column=4)
    _10m_excel_reciepts_entry_=ttk.Entry(data1_info)
    _10m_excel_reciepts_entry_.grid(row=5, column=4)
    _10m_excel_used_label_=ttk.Label(data1_info, text="10m Excel Used")
    _10m_excel_used_label_.grid(row=4, column=5)
    _10m_excel_used_entry_=ttk.Entry(data1_info)
    _10m_excel_used_entry_.grid(row=5, column=5)
    _12m_excel_reciepts_label_=ttk.Label(data1_info, text="12m Excel Reciepts")
    _12m_excel_reciepts_label_.grid(row=6, column=0)
    _12m_excel_reciepts_entry_=ttk.Entry(data1_info)
    _12m_excel_reciepts_entry_.grid(row=7, column=0)
    _12m_excel_used_label_=ttk.Label(data1_info, text="12m Excel Used")
    _12m_excel_used_label_.grid(row=6, column=1)
    _12m_excel_used_entry_=ttk.Entry(data1_info)
    _12m_excel_used_entry_.grid(row=7, column=1)
    _15m_excel_reciepts_label_=ttk.Label(data1_info, text="15m Excel Reciepts")
    _15m_excel_reciepts_label_.grid(row=6, column=2)
    _15m_excel_reciepts_entry_=ttk.Entry(data1_info)
    _15m_excel_reciepts_entry_.grid(row=7, column=2)
    _15m_excel_used_label_=ttk.Label(data1_info, text="15m Excel Used")
    _15m_excel_used_label_.grid(row=6, column=3)
    _15m_excel_used_entry_=ttk.Entry(data1_info)
    _15m_excel_used_entry_.grid(row=7, column=3)
    _slurry_reciept_label_=ttk.Label(data1_info, text="Slurry Reciept")
    _slurry_reciept_label_.grid(row=6, column=4)
    _slurry_reciept_entry_=ttk.Entry(data1_info)
    _slurry_reciept_entry_.grid(row=7, column=4)
    _slurry_used_label_=ttk.Label(data1_info, text="Slurry Used")
    _slurry_used_label_.grid(row=6, column=5)
    _slurry_used_entry_=ttk.Entry(data1_info)
    _slurry_used_entry_.grid(row=7, column=5)
    _slurry_big_reciept_label_=ttk.Label(data1_info, text="Slurry Big Reciept")
    _slurry_big_reciept_label_.grid(row=8, column=0)
    _slurry_big_reciept_entry_=ttk.Entry(data1_info)
    _slurry_big_reciept_entry_.grid(row=9, column=0)
    _slurry_big_used_label_=ttk.Label(data1_info, text="Slurry Big Used")
    _slurry_big_used_label_.grid(row=8, column=1)
    _slurry_big_used_entry_=ttk.Entry(data1_info)
    _slurry_big_used_entry_.grid(row=9, column=1)
    _ed_reciept_label_=ttk.Label(data1_info, text="E.D Reciept")
    _ed_reciept_label_.grid(row=8, column=2)
    _ed_reciept_entry_=ttk.Entry(data1_info)
    _ed_reciept_entry_.grid(row=9, column=2)
    _ed_used_label_=ttk.Label(data1_info, text="E.D Used")
    _ed_used_label_.grid(row=8, column=3)
    _ed_used_entry_=ttk.Entry(data1_info)
    _ed_used_entry_.grid(row=9, column=3)
    _d_det_reciepts_label_=ttk.Label(data1_info, text="D.Det Reciepts")
    _d_det_reciepts_label_.grid(row=8, column=4)
    _d_det_reciepts_entry_=ttk.Entry(data1_info)
    _d_det_reciepts_entry_.grid(row=9, column=4)
    _d_det_used_label_=ttk.Label(data1_info, text="D.Det Used")
    _d_det_used_label_.grid(row=8, column=5)
    _d_det_used_entry_=ttk.Entry(data1_info)
    _d_det_used_entry_.grid(row=9, column=5)
    df_5gms_reciepts_label_=ttk.Label(data1_info, text="DF 5gms Reciepts")
    df_5gms_reciepts_label_.grid(row=10, column=0)
    df_5gms_reciepts_entry_=ttk.Entry(data1_info)
    df_5gms_reciepts_entry_.grid(row=11, column=0)
    df_5gms_used_label_=ttk.Label(data1_info, text="DF 5gms Used")
    df_5gms_used_label_.grid(row=10, column=1)
    df_5gms_used_entry_=ttk.Entry(data1_info)
    df_5gms_used_entry_.grid(row=11, column=1)
    _df_10gms_reciepts_label_=ttk.Label(data1_info, text="DF 10gms Reciepts")
    _df_10gms_reciepts_label_.grid(row=10, column=2)
    _df_10gms_reciepts_entry_=ttk.Entry(data1_info)
    _df_10gms_reciepts_entry_.grid(row=11, column=2)
    _df_10gms_used_label_=ttk.Label(data1_info, text="DF 10gms Used")
    _df_10gms_used_label_.grid(row=10, column=3)
    _df_10gms_used_entry_=ttk.Entry(data1_info)
    _df_10gms_used_entry_.grid(row=11, column=3)
    _no_of_holes_2_5_label_=ttk.Label(data1_info, text="No of Holes 2.5")
    _no_of_holes_2_5_label_.grid(row=10, column=4)
    _no_of_holes_2_5_entry_=ttk.Entry(data1_info)
    _no_of_holes_2_5_entry_.grid(row=11, column=4)
    _no_of_holes_5_label_=ttk.Label(data1_info, text="No of Holes 5'")
    _no_of_holes_5_label_.grid(row=10, column=5)
    _no_of_holes_5_entry_=ttk.Entry(data1_info)
    _no_of_holes_5_entry_.grid(row=11, column=5)
    _no_of_holes_6_label_=ttk.Label(data1_info, text="No of Holes 6'")
    _no_of_holes_6_label_.grid(row=12, column=0)
    _no_of_holes_6_entry_=ttk.Entry(data1_info)
    _no_of_holes_6_entry_.grid(row=13, column=0)
    _no_of_holes_8_label_=ttk.Label(data1_info, text="No of Holes 8'")
    _no_of_holes_8_label_.grid(row=12, column=1)
    _no_of_holes_8_entry_=ttk.Entry(data1_info)
    _no_of_holes_8_entry_.grid(row=13, column=1)
    _wagon_drill_4_5_label_=ttk.Label(data1_info, text="Wagon Drill 4.5''")
    _wagon_drill_4_5_label_.grid(row=12, column=2)
    _wagon_drill_4_5_entry_=ttk.Entry(data1_info)
    _wagon_drill_4_5_entry_.grid(row=13, column=2)
    amount_paid_label_=ttk.Label(data1_info, text="Amount Paid to Balan")
    amount_paid_label_.grid(row=12, column=3)
    amount_paid_entry_=ttk.Entry(data1_info)
    amount_paid_entry_.grid(row=13, column=3)

    for widget in data1_info.winfo_children():
        widget.grid_configure(padx=20, pady=10)

    # Data Entry 2 Functions
    def save_data1():
        global db
        global cursor
        date=date1_entry.get()
        blasting_done_on=blasting_done_on_entry_.get()
        _3m_excel_reciept=int(_3m_excel_entry_.get())
        _3m_excel_used=int(_3m_excel_used_entry_.get())
        _4m_reciepts=int(_4m_reciepts_entry_.get())
        _4m_excel_used=int(_4m_excel_used_entry_.get())
        _5m_excel_reciepts=int(_5m_excel_reciepts_entry_.get())
        _5m_excel_used=int(_5m_excel_used_entry_.get())
        _6m_excel_reciepts=int(_6m_excel_reciepts_entry_.get())
        _6m_excel_used=int(_6m_excel_used_entry_.get())
        _7m_excel_reciepts=int(_7m_excel_reciepts_entry_.get())
        _7m_excel_used=int(_7m_excel_used_entry_.get())
        _8m_excel_reciepts=int(_8m_excel_reciepts_entry_.get())
        _8m_excel_used=int(_8m_excel_used_entry_.get())
        _9m_excel_reciepts=int(_9m_excel_reciepts_entry_.get())
        _9m_excel_used=int(_9m_excel_used_entry_.get())
        _10m_excel_reciepts=int(_10m_excel_reciepts_entry_.get())
        _10m_excel_used=int(_10m_excel_used_entry_.get())
        _12m_excel_reciepts=int(_12m_excel_reciepts_entry_.get())
        _12m_excel_used=int(_12m_excel_used_entry_.get())
        _15m_excel_reciepts=int(_15m_excel_reciepts_entry_.get())
        _15m_excel_used=int(_15m_excel_used_entry_.get())
        _slurry_reciept=int(_slurry_reciept_entry_.get())
        _slurry_used=int(_slurry_used_entry_.get())
        _slurry_big_reciept=int(_slurry_big_reciept_entry_.get())
        _slurry_big_used=int(_slurry_big_used_entry_.get())
        _ed_reciept=int(_ed_reciept_entry_.get())
        _ed_used=int(_ed_used_entry_.get())
        _d_det_reciepts=int(_d_det_reciepts_entry_.get())
        _d_det_used=int(_d_det_used_entry_.get())
        _df_5gms_reciepts=int(df_5gms_reciepts_entry_.get())
        _df_5gms_used=int(df_5gms_used_entry_.get())
        _df_10gms_reciepts=int(_df_10gms_reciepts_entry_.get())
        _df_10gms_used=int(_df_10gms_used_entry_.get())
        _no_of_holes_2_5=int(_no_of_holes_2_5_entry_.get())
        _no_of_holes_5=int(_no_of_holes_5_entry_.get())
        _no_of_holes_6=int(_no_of_holes_6_entry_.get())
        _no_of_holes_8=int(_no_of_holes_8_entry_.get())
        _wagon_drill_4_5=int(_wagon_drill_4_5_entry_.get())
        amount_paid=int(amount_paid_entry_.get())
        cursor.execute("USE mpdre")
        cursor.execute(f"insert into explosives values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",(date,blasting_done_on,_3m_excel_reciept,_3m_excel_used,_4m_reciepts,_4m_excel_used,_5m_excel_reciepts,_5m_excel_used,_6m_excel_reciepts,_6m_excel_used,_7m_excel_reciepts,_7m_excel_used,_8m_excel_reciepts,_8m_excel_used,_9m_excel_reciepts,_9m_excel_used,_10m_excel_reciepts,_10m_excel_used,_12m_excel_reciepts,_12m_excel_used,_15m_excel_reciepts,_15m_excel_used,_slurry_reciept,_slurry_used,_slurry_big_reciept,_slurry_big_used,_ed_reciept,_ed_used,_d_det_reciepts,_d_det_used,_df_5gms_reciepts,_df_5gms_used,_df_10gms_reciepts,_df_10gms_used,_no_of_holes_2_5,_no_of_holes_5,_no_of_holes_6,_no_of_holes_8,_wagon_drill_4_5,amount_paid))
        db.commit()
        messagebox.showinfo("Success", "Data saved successfully")
        clear_data1()
    def clear_data1():
        date1_entry.delete(0, 'end')
        blasting_done_on_entry_.delete(0, 'end')
        _3m_excel_entry_.delete(0, 'end')
        _3m_excel_used_entry_.delete(0, 'end')
        _4m_reciepts_entry_.delete(0, 'end')
        _4m_excel_used_entry_.delete(0, 'end')
        _5m_excel_reciepts_entry_.delete(0, 'end')
        _5m_excel_used_entry_.delete(0, 'end')
        _6m_excel_reciepts_entry_.delete(0, 'end')
        _6m_excel_used_entry_.delete(0, 'end')
        _7m_excel_reciepts_entry_.delete(0, 'end')
        _7m_excel_used_entry_.delete(0, 'end')
        _8m_excel_reciepts_entry_.delete(0, 'end')
        _8m_excel_used_entry_.delete(0, 'end')
        _9m_excel_reciepts_entry_.delete(0, 'end')
        _9m_excel_used_entry_.delete(0, 'end')
        _10m_excel_reciepts_entry_.delete(0, 'end')
        _10m_excel_used_entry_.delete(0, 'end')
        _12m_excel_reciepts_entry_.delete(0, 'end')
        _12m_excel_used_entry_.delete(0, 'end')
        _15m_excel_reciepts_entry_.delete(0, 'end')
        _15m_excel_used_entry_.delete(0, 'end')
        _slurry_reciept_entry_.delete(0, 'end')
        _slurry_used_entry_.delete(0, 'end')
        _slurry_big_reciept_entry_.delete(0, 'end')
        _slurry_big_used_entry_.delete(0, 'end')
        _ed_reciept_entry_.delete(0, 'end')
        _ed_used_entry_.delete(0, 'end')
        _d_det_reciepts_entry_.delete(0, 'end')
        _d_det_used_entry_.delete(0, 'end')
        df_5gms_reciepts_entry_.delete(0, 'end')
        df_5gms_used_entry_.delete(0, 'end')
        _df_10gms_reciepts_entry_.delete(0, 'end')
        _df_10gms_used_entry_.delete(0, 'end')
        _no_of_holes_2_5_entry_.delete(0, 'end')
        _no_of_holes_5_entry_.delete(0, 'end')
        _no_of_holes_6_entry_.delete(0, 'end')
        _no_of_holes_8_entry_.delete(0, 'end')
        _wagon_drill_4_5_entry_.delete(0, 'end')
        amount_paid_entry_.delete(0, 'end')
    def edit_data1():
        global db
        global cursor
        global date1_entry1
        win3=tk.Tk()
        win3.title("Edit Data")
        win3.iconbitmap("mines.ico")
        win3.geometry("325x200")
        win3.configure(background="#CCCCFF")
        frame3=ttk.Frame(win3,padding=20)
        frame3.pack()
        dataframe3=ttk.LabelFrame(frame3, text="Edit Data")
        dataframe3.grid(row=0, column=0, padx=10, pady=10)
        date_label3=ttk.Label(dataframe3, text="Date")
        date_label3.grid(row=0, column=0)
        date_entry3=ttk.Entry(dataframe3)
        date_entry3.grid(row=0, column=1)
        def search_data1():
            date1_entry_s=date_entry3.get()
            cursor.execute("USE mpdre")
            cursor.execute(f"select * from explosives where date={date1_entry_s}")
            data=cursor.fetchall()
            if data is not None:
                date1_entry.insert(0, data[0][0].strftime("%d/%m/%Y"))
                blasting_done_on_entry_.insert(0, data[0][1])
                _3m_excel_entry_.insert(0, data[0][2])
                _3m_excel_used_entry_.insert(0, data[0][3])
                _4m_reciepts_entry_.insert(0, data[0][4])
                _4m_excel_used_entry_.insert(0, data[0][5])
                _5m_excel_reciepts_entry_.insert(0, data[0][6])
                _5m_excel_used_entry_.insert(0, data[0][7])
                _6m_excel_reciepts_entry_.insert(0, data[0][8])
                _6m_excel_used_entry_.insert(0, data[0][9])
                _7m_excel_reciepts_entry_.insert(0, data[0][10])
                _7m_excel_used_entry_.insert(0, data[0][11])
                _8m_excel_reciepts_entry_.insert(0, data[0][12])
                _8m_excel_used_entry_.insert(0, data[0][13])
                _9m_excel_reciepts_entry_.insert(0, data[0][14])
                _9m_excel_used_entry_.insert(0, data[0][15])
                _10m_excel_reciepts_entry_.insert(0, data[0][16])
                _10m_excel_used_entry_.insert(0, data[0][17])
                _12m_excel_reciepts_entry_.insert(0, data[0][18])
                _12m_excel_used_entry_.insert(0, data[0][19])
                _15m_excel_reciepts_entry_.insert(0, data[0][20])
                _15m_excel_used_entry_.insert(0, data[0][21])
                _slurry_reciept_entry_.insert(0, data[0][22])
                _slurry_used_entry_.insert(0, data[0][23])
                _slurry_big_reciept_entry_.insert(0, data[0][24])
                _slurry_big_used_entry_.insert(0, data[0][25])
                _ed_reciept_entry_.insert(0, data[0][26])
                _ed_used_entry_.insert(0, data[0][27])
                _d_det_reciepts_entry_.insert(0, data[0][28])
                _d_det_used_entry_.insert(0, data[0][29])
                df_5gms_reciepts_entry_.insert(0, data[0][30])
                df_5gms_used_entry_.insert(0, data[0][31])
                _df_10gms_reciepts_entry_.insert(0, data[0][32])
                _df_10gms_used_entry_.insert(0, data[0][33])
                _no_of_holes_2_5_entry_.insert(0, data[0][34])
                _no_of_holes_5_entry_.insert(0, data[0][35])
                _no_of_holes_6_entry_.insert(0, data[0][36])
                _no_of_holes_8_entry_.insert(0, data[0][37])
                _wagon_drill_4_5_entry_.insert(0, data[0][38])
                amount_paid_entry_.insert(0, data[0][39])
            messagebox.showinfo("Success", "Data found. You can edit all values except date.")
            win3.destroy()
        editbutton1=ttk.Button(frame3, text="Edit", command=search_data1)
        editbutton1.grid(row=1, column=0)
        win3.mainloop()
        
    def update_data1():
        global db
        global cursor
        global date_entry3
        date=date1_entry.get()
        _blasting_done_on_=blasting_done_on_entry_.get()
        _3m_excel_reciept=int(_3m_excel_entry_.get())
        _3m_excel_used=int(_3m_excel_used_entry_.get())
        _4m_reciepts=int(_4m_reciepts_entry_.get())
        _4m_excel_used=int(_4m_excel_used_entry_.get())
        _5m_excel_reciepts=int(_5m_excel_reciepts_entry_.get())
        _5m_excel_used=int(_5m_excel_used_entry_.get())
        _6m_excel_reciepts=int(_6m_excel_reciepts_entry_.get())
        _6m_excel_used=int(_6m_excel_used_entry_.get())
        _7m_excel_reciepts=int(_7m_excel_reciepts_entry_.get())
        _7m_excel_used=int(_7m_excel_used_entry_.get())
        _slurry_reciept=int(_slurry_reciept_entry_.get())
        _slurry_used=int(_slurry_used_entry_.get())
        _slurry_big_reciept=int(_slurry_big_reciept_entry_.get())
        _slurry_big_used=int(_slurry_big_used_entry_.get())
        _ed_reciept=int(_ed_reciept_entry_.get())
        _ed_used=int(_ed_used_entry_.get())
        _d_det_reciepts=int(_d_det_reciepts_entry_.get())
        _d_det_used=int(_d_det_used_entry_.get())
        _df_5gms_reciepts=int(df_5gms_reciepts_entry_.get())
        _df_5gms_used=int(df_5gms_used_entry_.get())
        _df_10gms_reciepts=int(_df_10gms_reciepts_entry_.get())
        _df_10gms_used=int(_df_10gms_used_entry_.get())
        _no_of_holes_2_5=int(_no_of_holes_2_5_entry_.get())
        _no_of_holes_5=int(_no_of_holes_5_entry_.get())
        _no_of_holes_6=int(_no_of_holes_6_entry_.get())
        _no_of_holes_8=int(_no_of_holes_8_entry_.get())
        _wagon_drill_4_5=int(_wagon_drill_4_5_entry_.get())
        amount_paid=int(amount_paid_entry_.get())
        cursor.execute("USE mpdre")
        cursor.execute(f"update explosives set blasting_done_on={_blasting_done_on_}_3m_total={_3m_excel_reciept},_3m_used={_3m_excel_used},_4m_total={_4m_reciepts},_4m_used={_4m_excel_used},_5m_total={_5m_excel_reciepts},_5m_used={_5m_excel_used},_6m_total={_6m_excel_reciepts},_6m_used={_6m_excel_used},_7m_total={_7m_excel_reciepts},_7m_used={_7m_excel_used},_slurry_total={_slurry_reciept},_slurry_used={_slurry_used},_slurry_big_total={_slurry_big_reciept},_slurry_big_used={_slurry_big_used},_ed_total={_ed_reciept},_ed_used={_ed_used},_d_det_total={_d_det_reciepts},_d_det_used={_d_det_used},_df_5gms_total={_df_5gms_reciepts},_df_5gms_used={_df_5gms_used},_df_10gms_total={_df_10gms_reciepts},_df_10gms_used={_df_10gms_used},_no_of_holes_2_5={_no_of_holes_2_5},_no_of_holes_5={_no_of_holes_5},_no_of_holes_6={_no_of_holes_6},_no_of_holes_8={_no_of_holes_8},_wagon_drill_4_5={_wagon_drill_4_5},amount_paid={amount_paid} where date={date_entry3.get()}")
        db.commit()
        messagebox.showinfo("Success", "Data updated successfully")
        
    def delete_data1():
        global db
        global cursor
        win4=tk.Tk()
        win4.title("Delete Data")
        win4.configure(background="#CCCCFF")
        win4.iconbitmap("mines.ico")
        win4.geometry("325x200")
        frame4=ttk.Frame(win4,padding=20)
        frame4.pack()
        dataframe4=ttk.LabelFrame(frame4, text="Delete Data")
        dataframe4.grid(row=0, column=0, padx=10, pady=10)
        date_label4=ttk.Label(dataframe4, text="Date")
        date_label4.grid(row=0, column=0)
        date_entry4=ttk.Entry(dataframe4)
        date_entry4.grid(row=0, column=1)
        def del_data1():
            date1_entry_s=date_entry4.get()
            cursor.execute("USE mpdre")
            cursor.execute(f"delete from explosives where date={date1_entry_s}")
            db.commit()
            messagebox.showinfo("Success", "Data deleted successfully")
            win4.destroy()
        delbutton1=ttk.Button(frame4, text="Delete", command=del_data1)
        delbutton1.grid(row=1, column=0)
        win4.mainloop()
    # --- Data Entry 2 Functions Completed ---
    # --- Data Entry 2 Buttons ---
    button_frame1 = ttk.Frame(second_frame)
    button_frame1.grid(row= 3, column=0, padx=40, pady=10)
    #Button Save
    button_save1 = tk.Button(button_frame1, text="ㅤㅤㅤSaveㅤㅤㅤ", command= save_data1)
    button_save1.configure(background="green")
    button_save1.grid(row=0, column=0, sticky="news")
    # Button Clear
    button_clear1 = tk.Button(button_frame1, text="ㅤㅤㅤClearㅤㅤㅤ", command= clear_data1)
    button_clear1.configure(background="yellow")
    button_clear1.grid(row=0, column=1, sticky="news")
    # Button Edit
    button_edit1 = tk.Button(button_frame1, text="ㅤㅤㅤEditㅤㅤㅤ", command= edit_data1)
    button_edit1.configure(background="cyan")
    button_edit1.grid(row=0, column=2, sticky="news")
    #Button Update
    button_update1=tk.Button(button_frame1,text="ㅤㅤㅤUpdateㅤㅤㅤ",command=update_data1)
    button_update1.configure(background="orange")
    button_update1.grid(row=0,column=3,sticky="news")
    #Button Delete
    button_delete1 = tk.Button(button_frame1, text="ㅤㅤㅤDeleteㅤㅤㅤ", command= delete_data1)
    button_delete1.configure(background="red")
    button_delete1.grid(row=0, column=4, sticky="news")
    # --- Data Entry 2 Buttons Completed ---
    # --- Data Entry 2 Completed ---
    data2_frame=tk.LabelFrame(second_frame, text="Stocks",background="#CCCCFF",font=("Calibiri", 10))
    data2_frame.grid(row=4, column=0, padx=40, pady=10)
    # --- Stocks Labels ---
    _3m_excel_label_ = ttk.Label(data2_frame, text="3m Excel")
    _3m_excel_label_.grid(row=0, column=0)
    _4m_excel_label_ = ttk.Label(data2_frame, text="4m Excel")
    _4m_excel_label_.grid(row=1, column=0)
    _5m_excel_label_ = ttk.Label(data2_frame, text="5m Excel")
    _5m_excel_label_.grid(row=2, column=0)
    _6m_excel_label_ = ttk.Label(data2_frame, text="6m Excel")
    _6m_excel_label_.grid(row=3, column=0)
    _7m_excel_label_ = ttk.Label(data2_frame, text="7m Excel")
    _7m_excel_label_.grid(row=4, column=0)
    _8m_excel_label_ = ttk.Label(data2_frame, text="8m Excel")
    _8m_excel_label_.grid(row=5, column=0)
    _9m_excel_label_ = ttk.Label(data2_frame, text="9m Excel")
    _9m_excel_label_.grid(row=6, column=0)
    _10m_excel_label_ = ttk.Label(data2_frame, text="10m Excel")
    _10m_excel_label_.grid(row=7, column=0)
    _12m_excel_label_ = ttk.Label(data2_frame, text="12m Excel")
    _12m_excel_label_.grid(row=8, column=0)
    _15m_excel_label_ = ttk.Label(data2_frame, text="15m Excel")
    _15m_excel_label_.grid(row=9, column=0)
    _slurry_label_ = ttk.Label(data2_frame, text="Slurry")
    _slurry_label_.grid(row=10, column=0)
    _slurry_big_label_ = ttk.Label(data2_frame, text="Slurry Big")
    _slurry_big_label_.grid(row=11, column=0)
    _ed_label_ = ttk.Label(data2_frame, text="E.D")
    _ed_label_.grid(row=12, column=0)
    _d_det_label_ = ttk.Label(data2_frame, text="D.Det")
    _d_det_label_.grid(row=13, column=0)
    _df_5gms_label_ = ttk.Label(data2_frame, text="DF 5gms")
    _df_5gms_label_.grid(row=14, column=0)
    _df_10gms_label_ = ttk.Label(data2_frame, text="DF 10gms")
    _df_10gms_label_.grid(row=15, column=0)
    # --- Stocks Labels Completed ---
    # --- Stocks Queries ---
    _3m_excel_query = "select sum(_3m_total)-sum(_3m_used) from explosives"
    _4m_excel_query="select sum(_4m_total)-sum(_4m_used) from explosives"
    _5m_excel_query="select sum(_5m_total)-sum(_5m_used) from explosives"
    _6m_excel_query="select sum(_6m_total)-sum(_6m_used) from explosives"
    _7m_excel_query="select sum(_7m_total)-sum(_7m_used) from explosives"
    _8m_excel_query="select sum(_8m_total)-sum(_8m_used) from explosives"
    _9m_excel_query="select sum(_9m_total)-sum(_9m_used) from explosives"
    _10m_excel_query="select sum(_10m_total)-sum(_10m_used) from explosives"
    _12m_excel_query="select sum(_12m_total)-sum(_12m_used) from explosives"
    _15m_excel_query="select sum(_15m_total)-sum(_15m_used) from explosives"
    _slurry_query="select sum(_slurry_total)-sum(_slurry_used) from explosives"
    _slurry_big_query="select sum(_slurry_big_total)-sum(_slurry_big_used) from explosives"
    _ed_query="select sum(_ed_total)-sum(_ed_used) from explosives"
    _d_det_query="select sum(_ddet_total)-sum(_ddet_used) from explosives"
    _df_5gms_query="select sum(_df_5_gms_total)-sum(_df_5_gms_used) from explosives"
    _df_10gms_query="select sum(_df_10_gms_total)-sum(_df_10_gms_used) from explosives"

    # --- Stocks Queries Completed ---
    # --- Stocks Data ---
    cursor.execute("USE mpdre")
    _3m_excel_data = cursor.execute(_3m_excel_query)
    _3m_excel_query_data = cursor.fetchone()
    _4m_excel_data = cursor.execute(_4m_excel_query)
    _4m_excel_query_data = cursor.fetchone()
    _5m_excel_data = cursor.execute(_5m_excel_query)
    _5m_excel_query_data = cursor.fetchone()
    _6m_excel_data = cursor.execute(_6m_excel_query)
    _6m_excel_query_data = cursor.fetchone()
    _7m_excel_data = cursor.execute(_7m_excel_query)
    _7m_excel_query_data = cursor.fetchone()
    _8m_excel_data = cursor.execute(_8m_excel_query)
    _8m_excel_query_data = cursor.fetchone()
    _9m_excel_data = cursor.execute(_9m_excel_query)
    _9m_excel_query_data = cursor.fetchone()
    _10m_excel_data = cursor.execute(_10m_excel_query)
    _10m_excel_query_data = cursor.fetchone()
    _12m_excel_data = cursor.execute(_12m_excel_query)
    _12m_excel_query_data = cursor.fetchone()
    _15m_excel_data = cursor.execute(_15m_excel_query)
    _15m_excel_query_data = cursor.fetchone()
    _slurry_data = cursor.execute(_slurry_query)
    _slurry_query_data = cursor.fetchone()
    _slurry_big_data = cursor.execute(_slurry_big_query)
    _slurry_big_query_data = cursor.fetchone()
    _ed_data = cursor.execute(_ed_query)
    _ed_query_data = cursor.fetchone()
    _d_det_data = cursor.execute(_d_det_query)
    _d_det_query_data = cursor.fetchone()
    _df_5gms_data = cursor.execute(_df_5gms_query)
    _df_5gms_query_data = cursor.fetchone()
    _df_10gms_data = cursor.execute(_df_10gms_query)
    _df_10gms_query_data = cursor.fetchone()
    # --- Stocks Data Completed ---
    # --- Stocks Data Entry ---
    _3m_excel_entry1_ = ttk.Label(data2_frame, text="None")
    _3m_excel_entry1_.grid(row=0, column=1)
    _4m_excel_entry1_ = ttk.Label(data2_frame, text="None")
    _4m_excel_entry1_.grid(row=1, column=1)
    _5m_excel_entry1_ = ttk.Label(data2_frame, text="None")
    _5m_excel_entry1_.grid(row=2, column=1)
    _6m_excel_entry1_ = ttk.Label(data2_frame, text="None")
    _6m_excel_entry1_.grid(row=3, column=1)
    _7m_excel_entry1_ = ttk.Label(data2_frame, text="None")
    _7m_excel_entry1_.grid(row=4, column=1)
    _8m_excel_entry1_ = ttk.Label(data2_frame, text="None")
    _8m_excel_entry1_.grid(row=5, column=1)
    _9m_excel_entry1_ = ttk.Label(data2_frame, text="None")
    _9m_excel_entry1_.grid(row=6, column=1)
    _10m_excel_entry1_ = ttk.Label(data2_frame, text="None")
    _10m_excel_entry1_.grid(row=7, column=1)
    _12m_excel_entry1_ = ttk.Label(data2_frame, text="None")
    _12m_excel_entry1_.grid(row=8, column=1)
    _15m_excel_entry1_ = ttk.Label(data2_frame, text="None")
    _15m_excel_entry1_.grid(row=9, column=1)
    _slurry_entry1_ = ttk.Label(data2_frame, text="None")
    _slurry_entry1_.grid(row=10, column=1)
    _slurry_big_entry1_ = ttk.Label(data2_frame, text="None")
    _slurry_big_entry1_.grid(row=11, column=1)
    _ed_entry1_ = ttk.Label(data2_frame, text="None")
    _ed_entry1_.grid(row=12, column=1)
    _d_det_entry1_ = ttk.Label(data2_frame, text="None")
    _d_det_entry1_.grid(row=13, column=1)
    _df_5gms_entry1_ = ttk.Label(data2_frame, text="None")
    _df_5gms_entry1_.grid(row=14, column=1)
    _df_10gms_entry1_ = ttk.Label(data2_frame, text="None")
    _df_10gms_entry1_.grid(row=15, column=1)
    # --- Stocks Data Entry Completed ---
    # --- Refresh Button ---
    def refresh_stocks():
        _3m_excel_query = "select sum(_3m_total)-sum(_3m_used) from explosives;"
        _4m_excel_query="select sum(_4m_total)-sum(_4m_used) from explosives;"
        _5m_excel_query="select sum(_5m_total)-sum(_5m_used) from explosives;"
        _6m_excel_query="select sum(_6m_total)-sum(_6m_used) from explosives;"
        _7m_excel_query="select sum(_7m_total)-sum(_7m_used) from explosives;"
        _8m_excel_query="select sum(_8m_total)-sum(_8m_used) from explosives;"
        _9m_excel_query="select sum(_9m_total)-sum(_9m_used) from explosives;"
        _10m_excel_query="select sum(_10m_total)-sum(_10m_used) from explosives;"
        _12m_excel_query="select sum(_12m_total)-sum(_12m_used) from explosives;"
        _15m_excel_query="select sum(_15m_total)-sum(_15m_used) from explosives;"
        _slurry_query="select sum(_slurry_total)-sum(_slurry_used) from explosives;"
        _slurry_big_query="select sum(_slurry_big_total)-sum(_slurry_big_used) from explosives;"
        _ed_query="select sum(_ed_total)-sum(_ed_used) from explosives;"
        _d_det_query="select sum(_ddet_total)-sum(_ddet_used) from explosives;"
        _df_5gms_query="select sum(_df_5_gms_total)-sum(_df_5_gms_used) from explosives;"
        _df_10gms_query="select sum(_df_10_gms_total)-sum(_df_10_gms_used) from explosives;"
        cursor.execute("USE mpdre")
        cursor.execute(_3m_excel_query)
        r=cursor.fetchone()
        v1=r[0]
        _3m_excel_query_data = float(decimal.Decimal(v1))
        cursor.execute(_4m_excel_query)
        r=cursor.fetchone()
        v2=r[0]
        _4m_excel_query_data = float(decimal.Decimal(v2))
        cursor.execute(_5m_excel_query)
        r=cursor.fetchone()
        v3=r[0]
        _5m_excel_query_data = float(decimal.Decimal(v3))
        cursor.execute(_6m_excel_query)
        r=cursor.fetchone()
        v4=r[0]
        _6m_excel_query_data = float(decimal.Decimal(v4))
        cursor.execute(_7m_excel_query)
        r=cursor.fetchone()
        v5=r[0]
        _7m_excel_query_data = float(decimal.Decimal(v5))
        cursor.execute(_8m_excel_query)
        r=cursor.fetchone()
        v6=r[0]
        _8m_excel_query_data = float(decimal.Decimal(v6))
        cursor.execute(_9m_excel_query)
        r=cursor.fetchone()
        v7=r[0]
        _9m_excel_query_data = float(decimal.Decimal(v7))
        cursor.execute(_10m_excel_query)
        r=cursor.fetchone()
        v8=r[0]
        _10m_excel_query_data = float(decimal.Decimal(v8))  
        cursor.execute(_12m_excel_query)
        r=cursor.fetchone()
        v9=r[0]
        _12m_excel_query_data = float(decimal.Decimal(v9))
        cursor.execute(_15m_excel_query)
        r=cursor.fetchone()
        v10=r[0]
        _15m_excel_query_data = float(decimal.Decimal(v10))
        cursor.execute(_slurry_query)
        r=cursor.fetchone()
        v11=r[0]
        _slurry_query_data = float(decimal.Decimal(v11))
        cursor.execute(_slurry_big_query)
        r=cursor.fetchone()
        v12=r[0]
        _slurry_big_query_data = float(decimal.Decimal(v12))
        cursor.execute(_ed_query)
        r=cursor.fetchone()
        v13=r[0]
        _ed_query_data = float(decimal.Decimal(v13))
        cursor.execute(_d_det_query)
        r=cursor.fetchone()
        v14=r[0]
        _d_det_query_data = float(decimal.Decimal(v14))
        cursor.execute(_df_5gms_query)
        r=cursor.fetchone()
        v15=r[0]
        _df_5gms_query_data = float(decimal.Decimal(v15))
        cursor.execute(_df_10gms_query)
        r=cursor.fetchone()
        v16=r[0]
        _df_10gms_query_data = float(decimal.Decimal(v16))
        _3m_excel_entry1_.configure(text=_3m_excel_query_data)
        _4m_excel_entry1_.configure(text=_4m_excel_query_data)
        _5m_excel_entry1_.configure(text=_5m_excel_query_data)
        _6m_excel_entry1_.configure(text=_6m_excel_query_data)
        _7m_excel_entry1_.configure(text=_7m_excel_query_data)
        _8m_excel_entry1_.configure(text=_8m_excel_query_data)
        _9m_excel_entry1_.configure(text=_9m_excel_query_data)
        _10m_excel_entry1_.configure(text=_10m_excel_query_data)
        _12m_excel_entry1_.configure(text=_12m_excel_query_data)
        _15m_excel_entry1_.configure(text=_15m_excel_query_data)
        _slurry_entry1_.configure(text=_slurry_query_data)
        _slurry_big_entry1_.configure(text=_slurry_big_query_data)
        _ed_entry1_.configure(text=_ed_query_data)
        _d_det_entry1_.configure(text=_d_det_query_data)
        _df_5gms_entry1_.configure(text=_df_5gms_query_data)
        _df_10gms_entry1_.configure(text=_df_10gms_query_data)  

    refresh_button=ttk.Button(data2_frame,text="Refresh",command=refresh_stocks)
    refresh_button.grid(row=16,column=0)
    # --- Refresh Button Completed ---
    window.mainloop()
main()
